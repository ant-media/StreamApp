<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<context:annotation-config />
	<!-- Defines a properties file for dereferencing variables -->
	<context:property-placeholder location="/WEB-INF/red5-web.properties"/>

	<!--- S3 Recording info -->
	<bean id="app.storageClient" class="io.antmedia.storage.AmazonS3StorageClient">
	</bean>
	
	<bean id="app.settings" class="io.antmedia.AppSettings" />

	<!-- Defines the web context -->
	<bean id="web.context" class="org.red5.server.Context" autowire="byType" />

	<!-- Defines the web scopes -->
	<bean id="web.scope" class="org.red5.server.scope.WebScope">
		<property name="server" ref="red5.server" />
		<property name="parent" ref="global.scope" />
		<property name="context" ref="web.context" />
		<property name="handler" ref="web.handler" />
	</bean>

	<bean id="dataStoreFactory" class="io.antmedia.datastore.db.DataStoreFactory"/>

	<context:component-scan base-package="io.antmedia.rest" />
	<context:component-scan base-package="io.antmedia.plugin" />
	
	
	<bean id="acceptOnlyStreamsInDataStore" class="io.antmedia.security.AcceptOnlyStreamsInDataStore"/>
	<bean id="acceptOnlyStreamsWithWebhook" class="io.antmedia.security.AcceptOnlyStreamsWithWebhook"/>
	
	<bean id="hls.viewerstats" class="io.antmedia.statistic.HlsViewerStats" />
	<bean id="dash.viewerstats" class="io.antmedia.statistic.DashViewerStats" />
	
	<bean id="token.service"
		class="#{ T(io.antmedia.rest.RestServiceBase).isEnterprise() ? 'io.antmedia.enterprise.security.TokenService' : 'io.antmedia.security.MockTokenService' }">
	</bean>
	
	<bean id="publishIPFilter"
		class="#{ T(io.antmedia.rest.RestServiceBase).isEnterprise() ? 'io.antmedia.enterprise.security.PublishIPFilter' : 'io.antmedia.security.MockTokenService' }">
    </bean>
    
    <bean id="chunked.cache.manager"
		class="#{ T(io.antmedia.rest.RestServiceBase).isEnterprise() ? 'io.antmedia.enterprise.chunkedTransfer.ChunkedCacheManager' : 'io.antmedia.servlet.MockChunkedCacheManager' }">
    </bean>
    
    <bean id="streamAcceptFilter" class="io.antmedia.filter.StreamAcceptFilter"/>

	<!-- Defines the web handler which acts as an applications endpoint -->
	<bean id="web.handler" class="#{ T(io.antmedia.rest.RestServiceBase).isEnterprise() ? 'io.antmedia.enterprise.webrtc.WebRTCApplication' : 'io.antmedia.AntMediaApplicationAdapter' }">
		<property name="appSettings" ref="app.settings" />
		<property name="dataStoreFactory" ref="dataStoreFactory" />
		<property name="streamAcceptFilter" ref="streamAcceptFilter"/>
		<property name="streamPublishSecurityList">
			<list>
				<ref bean="acceptOnlyStreamsInDataStore"/>
				<ref bean="acceptOnlyStreamsWithWebhook"/>
			  	<ref bean="token.service"/>
				<bean class="io.antmedia.security.ExpireStreamPublishSecurity" >
					<property name="dataStoreFactory"  ref="dataStoreFactory"/>
				</bean>
				<ref bean="publishIPFilter"/>
			</list>
		</property>
	</bean>

	
	
    <bean id="webrtc.adaptor"  
    	class="#{ T(io.antmedia.rest.RestServiceBase).isEnterprise() ? 'io.antmedia.enterprise.webrtc.WebRTCAdaptor' : 'io.antmedia.webrtc.MockWebRTCAdaptor' }"/>
</beans>
